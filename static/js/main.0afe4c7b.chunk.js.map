{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","class","type","role","word","newWord","toLowerCase","charAt","toUpperCase","slice","capitalise","message","Navbar","className","mode","href","id","onClick","toggleMode","htmlFor","placeholder","TextForm","useState","text","setText","style","backgroundColor","color","rows","value","onChange","event","target","newText","trim","split","map","item","join","document","getElementById","select","navigator","clipboard","writeText","length","App","setMode","setAlert","showAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0afe4c7b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalise=(word)=>{\r\n        const newWord = word.toLowerCase();\r\n        return newWord.charAt(0).toUpperCase() + newWord.slice(1);\r\n    }\r\n    return (\r\n      props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalise(props.alert.type)}:</strong> {props.alert.message}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">TextAnalyzer by 'Sarang'</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">About</a>\r\n        </li>\r\n        \r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'} mx-4`}>\r\n          <input className=\"form-check-input \" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode==='dark'?'Light':'Dark'}Mode</label>\r\n      </div>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-info\" type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState('');\r\n\r\n    const upClicked=()=>{\r\n         var newText= text.toUpperCase();\r\n         setText(newText);\r\n         props.alert('Text converted to uppercase!','success');\r\n    }\r\n\r\n    const lowClicked=()=>{\r\n        var newText= text.toLowerCase();\r\n        setText(newText);\r\n        props.alert('Text converted to lowercase!','success');\r\n   }\r\n\r\n   const titleClicked=()=>{\r\n       var newText=text.trim().split(\" \").map((item)=>{\r\n           if(item[0] != null){\r\n           newText = item[0].toUpperCase() + item.slice(1);\r\n           }\r\n           return newText\r\n       });\r\n       setText(newText.join(' '));\r\n       props.alert('Text converted to titlecase!','success');\r\n   }\r\n\r\n   const clearText=()=>{\r\n       setText('');\r\n       props.alert('Cleared text!','success');\r\n   }\r\n\r\n   const handleCopy=()=>{\r\n       var newText = document.getElementById('text');\r\n       newText.select();\r\n       navigator.clipboard.writeText(newText.value);\r\n       props.alert('Copied to Clipboard!','success');\r\n   }\r\n\r\n   const removeExtraSpaces=()=>{\r\n       var newText = text.split(/[ ]+/);\r\n       setText(newText.join(' '));\r\n       props.alert('Extra spaces removed!','success');\r\n   }\r\n\r\n    const textChanged=(event)=>{\r\n        if(event.target.value != null){\r\n        setText(event.target.value);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n          <div className=\"conatiner mx-5 my-3\">\r\n                <div className={`mb-3 text-${props.mode==='dark'?'light':'dark'}`}>\r\n                    <h1>Enter the text to analyze</h1>\r\n                    <textarea className=\"form-control\" style={{backgroundColor: props.mode==='dark'?'#43434385':'white',\r\n                color:props.mode==='dark'?'white':'black'}} id=\"text\" rows=\"5\" value={text} onChange={textChanged}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-success mx-1\" onClick={upClicked}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-success mx-1\" onClick={lowClicked}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-success mx-1\" onClick={titleClicked}>Convert to Titlecase</button>\r\n                <button className=\"btn btn-success mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-success mx-1\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-danger mx-1\" onClick={clearText}>Clear text</button>\r\n         </div>\r\n         <div className={`conatiner my-3 mx-5 text-${props.mode==='dark'?'light':'dark'}`}>\r\n             <h2>Text Summary</h2>\r\n             <p>{text.trim().split(\" \").length} words and {text.trim().length} characters.</p>\r\n             <p>Time to read: {text.trim().split(\" \").length * 0.008} minutes</p>\r\n\r\n             <h2>Preview</h2>\r\n             <p>{text.length>0?text:\"(Enter your text in the textbox above to analyze)\"}</p>\r\n         </div>\r\n         \r\n             \r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState('');\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      message:message,\n      type:type\n    });\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(25 34 44)';\n      showAlert('Dark mode enabled!','success');\n    }\n    else{ \n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode enabled!','success');\n    }\n  }\n    \n  return (\n    \n    <div>\n      <Navbar mode={mode} toggleMode={toggleMode} /> \n      <Alert alert={alert}/>\n      <div className=\"container\">\n        <TextForm mode={mode} alert={showAlert} />  \n      </div> \n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}